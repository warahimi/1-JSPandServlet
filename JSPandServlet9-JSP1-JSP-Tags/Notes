JSP (Java Server Page)
JSP is the extension of Servlet Technology, But it provides more features and functionality than servlet.
JSP is made to resolve the Servlet existing problems. And coding with JSP is a lot easier.
JSP works same as servlet. It also runs on server side. 
As it runs on server side we accept the user request, process it and generate dynamic response with the help of JSP.
JSP can do whatever servlet could do plus it provide more functionalities and make coding a lot easier. And maintainable, / fast development / less code .

-	In Servlet we designed the html page in Java class (Servlet) which is a very difficult task.
Sun Microsystem introduced JSP to be used instead of Servlet to product dynamic pages. JSP is reverse of Servlet. We can write java codes inside jsp code /page
JSP is simply a page like html (index.jsp), its extension is .jsp.
Jsp supports html,css, JS, , we can write html… inside jsp,,,additionaly we can embed Java codes in JSP with the help of tags. Theses code will be translated by translator in run time,  This slove a lot of our problem.
In back end it works same as servlet the brought changes to the front end to make our work easier.


Why JSP?
What are Disadvantages of Servlet that jsp solved them?

Servlet is the base of web application development using Java technology, if you wana learn web development using Java technology then you must know Servlet.
Servlet is the base for Spring MVC, Status..
1-	Static content are generated by java from inside servlet. Designing in servlet is difficult., but using JSP we can write Dynamic content inside Static content(jsp page)
2-	For every request in servlet you have write service method which is very tiresome process. There might be n number of requests in our project, suppose we design a social networking website , there might be tons of request. In servlet we must write separate Servlet for each request and write the service method.
Jsp provided us with this facility that we don’t have write the server() and doPost()/doGet(), they generated automatically . to handle request we just create tags (script let tags) and write you Java code inside jsp. To handle and process any request and generate response for the user.
3-	Whenever modification is made in static content (presentation logic) then servlet needs to be recompile and redeployed.
Any changes we bring in html portion (not java content) of servlet it need to recompiled and redeployed
But jsp solve it , because we create jsp page (static content) and embed the dynamic content (java code) inside it, if we bring changes in our design/static content/html/jsp/js/cs.. we don’t need to recompile and redeploy our project
That is why development will be faster , less code, manageable codes, ..
JSP also provides us a lot of libraries that we can use such as: JSP Standard Tags Library (JSTL) inside which are the predefined tags ,, if we wanted we can make our own custom tags as well.


Commonly used tags used in JSP:
Declarative, Scriptlet, Expressive tags

1-	Declarative (Declaration) tag: we declare Java variable and methods using/inside this tag
<%!
Variable;
Methods();
%>
2-	Scriptlet tag (Scripting Elements): we write all the java code for processing the logic 
<%
	Java Source Code, any code we write here goes to service()
	Whatever code we were writing inside service() in servlet we write them here
	Fe. To print, process and generate response 
%>

We can do our designs in jsp and we ever Java code is need we can simply embedded the java dynamic code inside our jsp static code wit the help if these tags.
3-	Expression tag (Expressive Tag) : to print some thing in browser
<%=
	Statement
	This tag is used for printing in the browser 
	Generating response and send to client
%>



4-	Directive tags (JSP Directives): provides direction to java developer to deal with JSP.
a.	Page Directive  (<%@page...%>) : if we want to specify/apply some thing for the entire page: import a package, specify the language, mention if the page handles the exception or not
b.	Include Directive (@include) : to include other jsp file/page on our page, to include other resources to our page, fe. If we want to make a header and footer and use to all our pages …
c.	Taglib Directive (@taglib) : to use external tags, such as spring tags … to use other tag libraries in our page, libraries mean predefined tags/codes in a package
Fe: JSTL there are many tags in JSTL
Core: out,foreach,if..
Sql tags
Formatting tags
To take advantages of all these predefined tags we just include the JSTL in our page using Taglib.
